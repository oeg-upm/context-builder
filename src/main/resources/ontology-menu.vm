<!DOCTYPE html>
<html>

<head>
  
   <script type="text/javascript" src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"></script>

    <style type="text/css">
        #mynetwork {
            width: 600px;
            height: 400px;
            border: 1px solid lightgray;
        }
        #owlClassChooser {
          background-image: url('/css/searchicon.png'); /* Add a search icon to input */
          background-position: 10px 12px; /* Position the search icon */
          background-repeat: no-repeat; /* Do not repeat the icon image */
          width: 100%; /* Full-width */
          font-size: 16px; /* Increase font-size */
          padding: 12px 20px 12px 40px; /* Add some padding */
          border: 1px solid #ddd; /* Add a grey border */
          margin-bottom: 12px; /* Add some space below the input */
        }

    #ulForOwlClasses {
      /* Remove default list styling */
      list-style-type: none;
      padding: 0;
      margin: 0;
    }

    #ulForOwlClasses li a {
      border: 1px solid #ddd; /* Add a border to all links */
      margin-top: -1px; /* Prevent double borders */
      background-color: #f6f6f6; /* Grey background color */
      padding: 12px; /* Add some padding */
      text-decoration: none; /* Remove default text underline */
      font-size: 18px; /* Increase the font-size */
      color: black; /* Add a black text color */
      display: block; /* Make it into a block element to fill the whole list */
    }

    #ulForOwlClasses li a:hover:not(.header) {
      background-color: #eee; /* Add a hover effect to all links, except for headers */
    }
    </style>
</head>
<body>

<h2>Context builder v1.2</h2>

<form action="/api/ontology">
  <label for="url">Ontology:</label><br>
  <input type="text" id="url" name="url"><br>
   <input type="submit" value="load">
</form> 

#if ($classes)
    <h2>Choose a root owl class</h2>
    <input type="text" id="owlClassChooser" onkeyup="myFunction()" placeholder="Search for names.." title="Type in a name">
    <ul id="ulForOwlClasses">
        #foreach ($class in $classes)
            <li><a href="#" onclick="">$class</a></li>
        #end
    </ul>
    <script>
    function myFunction() {
        var input, filter, ul, li, a, i, txtValue;
        input = document.getElementById("owlClassChooser");
        filter = input.value.toUpperCase();
        ul = document.getElementById("ulForOwlClasses");
        li = ul.getElementsByTagName("li");
        console.log(li);
        for (i = 0; i < li.length; i++) {
            a = li[i].getElementsByTagName("a")[0];
            txtValue = a.textContent || a.innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                li[i].style.display = "";
            } else {
                li[i].style.display = "none";
            }
        }
    }
    </script>

#end

<div id="mynetwork"></div>

<script type="text/javascript">


    // create an array with nodes
    var nodes = new vis.DataSet([
        {id: 1, label: 'Node 1'},
        {id: 2, label: 'Node 2'},
        {id: 3, label: 'Node 3'},
        {id: 4, label: 'Node 4'},
        {id: 5, label: 'Node 5'}
    ]);

    // create an array with edges
    var edges = new vis.DataSet([
        {from: 1, to: 3},
        {from: 1, to: 2},
        {from: 2, to: 4},
        {from: 2, to: 5}
    ]);

    // create a network
    var container = document.getElementById('mynetwork');

    // provide the data in the vis format
    var data = {
        nodes: nodes,
        edges: edges
    };
    var options = {};

    // initialize your network!
    var network = new vis.Network(container, data, options);
    function deleteEdgeMode(nodeId){
        network.deleteSelected();
    }
    
</script>


</body>
</html>
